import React, { useState, useEffect } from "react";
import { Input, Button, Card, Typography, Spin, message, Flex, Avatar, Tooltip, Upload } from "antd";
import { CopyOutlined, UserOutlined, RobotOutlined, SendOutlined, UploadOutlined, ExpandOutlined } from "@ant-design/icons";
// import { createProject } from "@stackblitz/sdk";
import * as stackblitz from "@stackblitz/sdk";

const { Text } = Typography;

const ChatApp = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);
  const [codeFiles, setCodeFiles] = useState(null);
  const [iframeUrl, setIframeUrl] = useState("");

  const extractFilesFromResponse = (responseText) => {
    const filePattern = /```(jsx|javascript|json|css)?\n([\s\S]*?)```/g;
    let match;
    const files = {};

    while ((match = filePattern.exec(responseText)) !== null) {
      const fileType = match[1] || "js";
      const fileContent = match[2].trim();
      const filePath = fileType === "css" ? "styles.css" : "App.js";
      files[filePath] = fileContent;
    }

    return files;
  };

  const sendMessage = async () => {
    if (!input.trim()) {
      message.warning("Please enter a query.");
      return;
    }

    setMessages((prev) => [...prev, { role: "user", content: input }]);
    setInput("");
    setLoading(true);

    try {
      const response = await fetch("http://127.0.0.1:8081/query", {
        method: "POST",
        body: JSON.stringify({ query: input }),
        headers: { "Content-Type": "application/json" },
      });

      const data = await response.json();
      if (data.response) {
        setMessages((prev) => [...prev, { role: "ai", content: data.response }]);
        const extractedFiles = extractFilesFromResponse(data.response);

        setCodeFiles(extractedFiles);
        const project = stackblitz.openProject(
            {
              files: extractedFiles,
              title: "AI Generated Code",
              description: "Generated by AI",
              template: "create-react-app",
              dependencies: { react: "^18.0.0", "react-dom": "^18.0.0" },
            },
            {
              openFile: "App.js",
              newWindow: false,
            }
          );
          
          // Extract iframe URL from the project
          if (project && project.embedUrl) {
            setIframeUrl(project.embedUrl);
          }
          
      } else {
        message.error("No response received");
      }
    } catch (error) {
      message.error("Failed to fetch response");
      console.error(error);
    }

    setLoading(false);
  };

  return (
    <Flex gap={4} justify="space-between" style={{ marginTop: 20 }}>
      <Card title="AI Code Generator" style={{ width: "60%", padding: 20 }}>
        <div style={{ maxHeight: 500, overflowY: "auto", marginBottom: 10, padding: "10px" }}>
          {messages.map((msg, index) => (
            <Flex key={index} align="start" style={{ marginBottom: 10, justifyContent: msg.role === "user" ? "flex-end" : "flex-start" }}>
              {msg.role === "ai" && <Avatar icon={<RobotOutlined />} style={{ marginRight: 10 }} />}
              <Card size="small" style={{ background: msg.role === "user" ? "#E3F2FD" : "#F6F6F6", maxWidth: "70%" }}>
                <Text strong>{msg.role === "user" ? "You:" : "AI:"}</Text>
                <Typography.Paragraph>{msg.content}</Typography.Paragraph>
              </Card>
              {msg.role === "user" && <Avatar icon={<UserOutlined />} style={{ marginLeft: 10, background: "#f58220" }} />}
            </Flex>
          ))}
          {loading && <Spin />}
        </div>

        <Input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onPressEnter={sendMessage}
          placeholder="Type your message..."
          addonAfter={<SendOutlined onClick={sendMessage} />}
        />
      </Card>

      <Card style={{ width: 500, padding: "20px" }}>
        <Text strong>StackBlitz Code Execution</Text>
        {iframeUrl ? <iframe src={iframeUrl} width="100%" height="400px" frameBorder="0" title="StackBlitz Preview" /> : <Text>No Code Generated Yet</Text>}
      </Card>
    </Flex>
  );
};

export default ChatApp;
